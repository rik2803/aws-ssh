#! /usr/bin/env bash

_get_service_port_and_ecshost_and_dockerid() {
  service_name=${1:-unknown}

  _get_ecs_private_ips >/dev/null 2>&1

  local ecshost_and_port
  local ecshost_and_id

  ecshost_and_port=$(for h in ${ECS_HOST_IPS_ARRAY[*]}
  do
    if [[ ${h} != "None" ]]
    then
      PORT=$(ssh ${SSH_OPTIONS} -A -J ec2-user@${BASTION_IP} \
        ec2-user@${h} "docker ps --filter \"name=${service_name}\" --format \"{{.Ports}}\"" | \
        awk -F ':' '{print $2}' | awk -F '-' '{print $1}')
      if [[ -n ${PORT} ]]
      then
        echo "${h} ${PORT}"
        break
      fi
    fi
  done)

  ecshost_and_id=$(for h in ${ECS_HOST_IPS_ARRAY[*]}
  do
    if [[ ${h} != "None" ]]
    then
      ID=$(ssh ${SSH_OPTIONS} -A -J ec2-user@${BASTION_IP} \
        ec2-user@${h} "docker ps --filter \"name=${service_name}\" --format \"{{.ID}}\"")
      if [[ -n ${ID} ]]
      then
        echo "${h} ${ID}"
        break
      fi
    fi
  done)

  if [[ $(IFS=' '; set -f; set -- ${ecshost_and_port}; echo $#) -eq 2 ]] && \
     [[ $(IFS=' '; set -f; set -- ${ecshost_and_id}; echo $#) -eq 2 ]]
  then
    set -- ${ecshost_and_port} ${ecshost_and_id}
    ECSHOST=${1}
    DOCKERPORT=${2}
    DOCKERID=${4}
  else
    fail "No container found where the name contains ${service_name}"
  fi
}

_check_bastion_ip_and_exit_if_not_set() {
  local action
  action="${1}"
  if [[ -z "${BASTION_IP}" ]]; then
    fail "BASTION_IP not set, no bastion host found but required for action \"${action}\". Exiting ..."
  fi
}

_tunnel_to_ecs_service() {
  service_name=${1:-unknown}
  local localport=${2:-9999}
  _get_service_port_and_ecshost_and_dockerid ${service_name}

  _copy_public_key_to_target_ec2_instance
  if ssh -f -Nn -J ec2-user@${BASTION_IP} -L ${localport}:localhost:${DOCKERPORT} ec2-user@${ECSHOST}; then
    echo "INFO: Tunnel to service ${service_name} is established on localhost:${localport}"
    echo "      The tunnel is running in the background, do not forget to kill the"
    echo "      corresponding ssh process."
  else
    fail "An error occured setting up the tunnel to service ${SERVICE}"
  fi
}

_dockerexec() {
  # This will not be possible when using SSM and ec2-instance-connect
  local service_name=${1}
  local cmd=${2}
  _get_service_port_and_ecshost_and_dockerid ${service_name}

  ssh -tt -J ec2-user@${BASTION_IP} ec2-user@${ECSHOST} "docker exec -ti ${DOCKERID} ${cmd}"
}

_get_bastion_ip() {
  set -- $(aws ec2 describe-instances \
    --filters "Name=tag:Name,Values=*astion*" \
    --query "Reservations[*].Instances[*].[PublicIpAddress,KeyName,PrivateIpAddress,InstanceId,Placement.AvailabilityZone]" \
    --output text | grep -v ^None)
  if [ -n "${1}" ] && [ -n "${2}" ] && [ -n "${3}" ] && [ -n "${4}" ]
  then
    BASTION_IP=${1}
    if [[ -n ${AWS_SSH_FORCE_SSH_KEY} ]]; then
      AWS_SSH_KEYNAME=${AWS_SSH_FORCE_SSH_KEY}
    elif [[ "${2}" != "None" ]]; then
      AWS_SSH_KEYNAME=${2}
    else
      [[ ${AWS_SSH_SSM:-0} != 1 ]] && warning "The bastion has no KeyName, switching to SSM for authentication."
      export AWS_SSH_SSM=1
    fi
    if [[ ${AWS_SSH_KEYNAME} != /* ]] && [[ ${AWS_SSH_SSM:-0} != 1 ]]; then
      AWS_SSH_KEYNAME=${PKH:-~/.ssh}/${AWS_SSH_KEYNAME}
    fi

    BASTION_INSTANCE_ID=${4}
    BASTION_AZ=${5}
  else
    warning "Unable to find a bastion EC2 instance"
  fi
}

_get_ec2_instance_id_and_az() {
  set -- $(aws ec2 describe-instances \
    --filters Name=tag:Name,Values=${1} Name=instance-state-name,Values=running \
    --query "Reservations[*].Instances[*].[InstanceId,Placement.AvailabilityZone]" \
    --output text | grep -v ^None)
  if [ -n "${1}" ] && [ -n "${2}" ]
  then
    BASTION_INSTANCE_ID=${1}
    BASTION_AZ=${2}
  else
    warning "Unable to find an EC2 instance with name ${1}"
  fi
}

_get_ecs_private_ips() {
  local ecs_host_ips_1
  ecs_host_ips_1=$(aws ec2 describe-instances \
    --filters "Name=tag:ECSClusterName,Values=*" \
    --query "Reservations[*].Instances[*].[PrivateIpAddress]" \
    --output text)
  local ecs_host_ips_2
  ecs_host_ips_2=$(aws ec2 describe-instances \
    --filters "Name=tag:Name,Values=*ECS*" \
    --query "Reservations[*].Instances[*].[PrivateIpAddress]" \
    --output text)

  ECS_HOST_IPS="${ecs_host_ips_1} ${ecs_host_ips_2}"

  ECS_HOST_IPS_ARRAY=(${ECS_HOST_IPS//None/})

  if [[ -z ${ECS_HOST_IPS} ]]
  then
    echo "ERROR - Unable to find ECS hosts"
    exit 1
  fi
}

_get_rds_endpoints() {
  SAVED_IFS="${IFS}"
  IFS=$(echo -en "\n\b") RDS_ENDPOINTS=($(aws rds describe-db-instances \
    --query "DBInstances[*].Endpoint.[Address,Port]" \
    --output text | tr ' \t' ':'))
  IFS="${SAVED_IFS}"

  if [[ ${#RDS_ENDPOINTS[@]} -eq 0 ]]; then
    fail "Unable to find RDS instances"
  fi
}

_get_opensearch_endpoints() {
  IFS=$(echo -en "\n\b") OPENSEARCH_ENDPOINTS=($(aws opensearch list-domain-names \
    --query "DomainNames[*].DomainName" \
    --output text | while read domain; do \
      aws opensearch describe-domains \
        --domain-names ${domain} \
        --query "DomainStatusList[*].Endpoints.vpc" \
        --output text
    done))

  if [[ ${#OPENSEARCH_ENDPOINTS[@]} -eq 0 ]]; then
    fail "Unable to find opensearch instances"
  fi
}

_get_ec2_instances() {
  IFS=$(echo -en "\n\b") EC2_INSTANCES=($(aws ec2 describe-instances \
      --filters Name=instance-state-name,Values=running \
      --query "Reservations[*].Instances[*].[PrivateIpAddress,InstanceId,Placement.AvailabilityZone,Tags[?Key=='Name'].Value,State.Name][]" | \
      jq -r '.[] | .[3][0] + ":" + .[0] + ":" + .[1]+ ":" + .[2] + ":" + .[4]|split(" ")|join("")'))

  if [[ ${#EC2_INSTANCES[@]} -eq 0 ]]; then
    fail "Unable to find EC2 instances"
  fi
}

_get_ssm_instances() {
  IFS=$(echo -en "\n\b") SSM_INSTANCES=($(aws ssm describe-instance-information \
    --filter "Key=PingStatus,Values=Online" \
    --query "InstanceInformationList[*].[InstanceId, PlatformType, PlatformName, ComputerName]" | \
    jq -r '.[] | .[0] + ":" + .[1]+ ":" + .[2] + ":" + .[3]|split(" ")|join("")'))

  for i in "${!SSM_INSTANCES[@]}"; do
    instance="${SSM_INSTANCES[$i]}"
    instance_name=$(_get_tag_for_resource "Name" "${instance%%:*}" "instance")
    SSM_INSTANCES[$i]="${instance_name}:${instance}"
  done

  if [[ ${#SSM_INSTANCES[@]} -eq 0 ]]; then
    fail "Unable to find SSM instances"
  fi
}

_get_tag_for_resource() {
  local tag_name
  local resource_id
  local resource_type
  local tag_value

  tag_name="${1}"
  resource_id="${2}"
  resource_type="${3:-instance}"

  tag_value=$(aws ec2 describe-tags --filter Name="resource-type",Values="${resource_type}" \
     --query "Tags[*]|[?Key == '${tag_name}']|[?ResourceId == '${resource_id}'].[Value][0][0]" 2>/dev/null | tr -d '"')

  echo "${tag_value:-Unknown}"
}

_copy_public_key_to_target_ec2_instance() {
  if [[ ${AWS_SSH_SSM:-0} == 1 ]]; then
    if aws ec2-instance-connect send-ssh-public-key \
      --instance-id "${BASTION_INSTANCE_ID}" \
      --availability-zone "${BASTION_AZ}" \
      --instance-os-user ec2-user \
      --ssh-public-key "file://${AWS_SSH_PUBKEY:-${HOME}/.ssh/id_rsa.pub}" >/dev/null; then
        success "Successfully copied \"${AWS_SSH_PUBKEY:-${HOME}/.ssh/id_rsa.pub}\" to target EC2 instance."
    else
        fail "An error occurred while copying \"${AWS_SSH_PUBKEY:-${HOME}/.ssh/id_rsa.pub}\" to bastion host."
    fi
  fi
}

_load_private_key() {
  local aws_ssh_key_dirname
  local aws_ssh_key_basename

  ### Load the private Key
  if [[ ${AWS_SSH_SSM:-0} == 1 ]]; then
    aws_ssh_key_dirname=$(dirname ${AWS_SSH_SSM_PRIVKEY:-~/.ssh/dummy})
    aws_ssh_key_basename=$(basename ${AWS_SSH_SSM_PRIVKEY:-id_rsa})
  else
    aws_ssh_key_dirname=$(dirname "${AWS_SSH_KEYNAME}")
    aws_ssh_key_basename=$(basename "${AWS_SSH_KEYNAME}")
  fi

  if ssh-add -l | grep -q "${aws_ssh_key_dirname}/${aws_ssh_key_basename}"
  then
    info "Private key ${aws_ssh_key_dirname}/${aws_ssh_key_basename} already loaded"
  elif [[ -e ${aws_ssh_key_dirname}/${aws_ssh_key_basename} ]]
  then
    ssh-add "${aws_ssh_key_dirname}/${aws_ssh_key_basename}"
  elif [[ -e ${aws_ssh_key_dirname}/${aws_ssh_key_basename}.pem ]]
  then
    ssh-add "${aws_ssh_key_dirname}/${aws_ssh_key_basename}.pem"
  elif [[ -e ${aws_ssh_key_dirname}/id_rsa_${aws_ssh_key_basename} ]]
  then
    ssh-add "${aws_ssh_key_dirname}/id_rsa_${aws_ssh_key_basename}"
  elif [[ -e ${aws_ssh_key_dirname}/id_rsa_${aws_ssh_key_basename}.pem ]]
  then
    ssh-add "${aws_ssh_key_dirname}/id_rsa_${aws_ssh_key_basename}.pem"
  else
    warning "Private key \"${aws_ssh_key_dirname}/\*${aws_ssh_key_basename}\*\" not found, trying to connect using SSM"
    AWS_SSH_SSM=1
  fi
}

_selection_menu() {
  local saved_ps3="${PS3}"
  local saved_columns="${COLUMNS}"
  local choices

  choices=(${@})

  if [[ ${#choices[@]} -eq 1 ]]; then
    SELECTION_CHOICE="${choices[0]}"
  else
    PS3="Enter a number: "
    COLUMNS="20"
    select choice in "${choices[@]}"; do
      if [[ ${REPLY} -gt 0 && ${REPLY} -le ${#} ]]; then
        SELECTION_CHOICE=${choice}
        break
      fi
    done
  fi
  PS3="${saved_ps3}"
  COLUMNS="${saved_columns}"
}

typeset -a ECS_HOST_IPS_ARRAY

gray='\033[37m'
blue='\033[36m'
red='\033[31m'
green='\033[32m'
orange='\033[33m'
reset='\033[0m'

info()    { echo -e "${blue}INFO: $*${reset}"; }
plain()   { echo -e "${green}$*${reset}"; }
warning() { echo -e "${orange}WARN: $*${reset}"; }
error()   { echo -e "${red}ERROR: $*${reset}"; }
success() { echo -e "${green}✔ $*${reset}"; }
fail()    { echo -e "${red}✖ $*${reset}"; exit 1; }
debug()   { [[ "${DEBUG}" == "true" ]] && echo -e "${gray}DEBUG: $*${reset}" || true; }

BASTION_IP=""

AWS_SSH_KEYNAME=""
ECS_HOST_IPS=""
RDS_ENDPOINTS=""
SSH_OPTIONS="-oStrictHostKeyChecking=no -oGatewayPorts=true"

[[ ${AWS_SSH_SSM} -ne 1 ]] || warning "Envvar AWS_SSH_SSM not set to 1, not using SSM to connect."
[[ -n ${PRIVKEYHOME} ]] && PKH=${PRIVKEYHOME}
[[ -n ${AWS_SSH_PRIVKEYHOME} ]] && PKH=${AWS_SSH_PRIVKEYHOME}

case ${1} in
  bastion|ecs|ecsscp|ec2|ssm|rdstunnel|opensearchtunnel|dockerps|ecsservicetunnel|dockerexec|custombastiontunnel|customtunnel|portforward )
    _get_bastion_ip
    _load_private_key
    ;;
  * )
    info "Usage:"
    info "  ${0} bastion [command]"
    info "  ${0} ecs [command]"
    info "  ${0} ecsscp"
    info "  ${0} ec2"
    info "  ${0} ssm"
    info "  ${0} dockerps"
    info "  ${0} rdstunnel"
    info "  ${0} opensearchtunnel"
    info "  ${0} ecsservicetunnel <service>"
    info "  ${0} dockerexec <service>"
    info "  ${0} custombastiontunnel <ip-address> <port> [<remoteport>] [<ec2-instance-name>]"
    info "  ${0} customtunnel <ip-address> <port> [<remoteport>] [<ec2-instance-name>]"
    info "  ${0} portforward <port> <remoteport>"
    info ""
    info "Set PRIVKEYHOME or AWS_SSH_PRIVKEYHOME envvar to tell me"
    info "where your private keys are."
    info "Default is ~/.ssh"
    info "Set AWS_SSH_FORCE_SSH_KEY to override use of bastions key"
    info "in favor of your own key (requires your pubkey to be present"
    info "on the EC2 instances)."
    info "Set AWS_SSH_SSM to 1 to use SSM as transport layer for the connection."
    ;;
esac

case ${1} in
  bastion )
    info "Log in to bastion account"
    _check_bastion_ip_and_exit_if_not_set "${1}"
    shift
    _copy_public_key_to_target_ec2_instance
    ssh ${SSH_OPTIONS} -t -A ec2-user@${BASTION_IP} "${@}"
    ;;
  ecs )
    _get_ecs_private_ips
    info "Show commands to connect to ECS ec2 instances"
    shift
    for h in ${ECS_HOST_IPS_ARRAY[*]}
    do
      if [[ ${h} != "None" ]]
      then
        echo "ssh ${SSH_OPTIONS} -t -A ec2-user@${BASTION_IP} 'ssh ${SSH_OPTIONS} -A ${h} ${*}'"
        if [[ ${#ECS_HOST_IPS_ARRAY[@]} -eq 1 ]]
        then
          ssh ${SSH_OPTIONS} -t -A ec2-user@${BASTION_IP} "ssh ${SSH_OPTIONS} -A ${h} ${*}"
        fi
      fi
    done
    ;;
  ecsscp )
    _get_ecs_private_ips
    echo "INFO - Show commands to scp files from ECS ec2 instances"
    shift
    for h in ${ECS_HOST_IPS_ARRAY[*]}
    do
      if [[ ${h} != "None" ]]
      then
        echo "scp -o ProxyCommand=\"ssh -A ec2-user@${BASTION_IP} -W ${h}:22\" ec2-user@${h}:/tmp/source_file /tmp/target_file"
      fi
    done
    ;;
  ec2 )
    plain ""
    plain "Select the EC2 instance to connect to using SSM:"
    _get_ec2_instances

    _selection_menu "${EC2_INSTANCES[@]}"

    SAVED_IFS="${IFS}"
    IFS=':' read -ra array <<< "${SELECTION_CHOICE}"
    IFS="${SAVED_IFS}"

    info "Starting SSM session to EC2 instance with name tag ${array[0]}."
    aws ssm start-session --target "${array[2]}"
    ;;
  ssm )
    plain ""
    plain "Select the SSM managed instance to connect to using:"
    _get_ssm_instances

    _selection_menu "${SSM_INSTANCES[@]}"

    SAVED_IFS="${IFS}"
    IFS=':' read -ra array <<< "${SELECTION_CHOICE}"
    IFS="${SAVED_IFS}"

    info "Starting SSM session to EC2 instance with name tag ${array[4]}."
    aws ssm start-session --target "${array[1]}"
    ;;
  rdstunnel )
    plain ""
    plain "Select the DB to set up a tunnel to from this list:"
    _get_rds_endpoints

    _selection_menu "${RDS_ENDPOINTS[@]}"

    SAVED_IFS="${IFS}"
    IFS=':' read -ra array <<< "${SELECTION_CHOICE}"
    IFS="${SAVED_IFS}"

    local_port="${AWS_SSH_RDS_LOCAL_PORT:-${array[1]}}"
    info "Starting local tunnel to ${array[0]} on local port ${local_port}."
    info "SSH Tunnel will start in foreground, use Ctrl-C to close the tunnel."
    if [[ ${AWS_SSH_SSM} -ne 1  ]]; then
      info "Using ssh as transport because AWS_SSH_SSM is not set to 1."
      _check_bastion_ip_and_exit_if_not_set "${1}"
      ssh ${SSH_OPTIONS} -Nnt -A -L ${local_port}:${array[0]}:${array[1]} ec2-user@${BASTION_IP}
    else
      info "Using SSM as transport because AWS_SSH_SSM is set to 1."
      _copy_public_key_to_target_ec2_instance
      ssh ${SSH_OPTIONS} \
         -o ProxyCommand="sh -c \"aws ssm start-session --target %h --document-name AWS-StartSSHSession --parameters 'portNumber=%p'\"" \
         -Nnt -A -L ${local_port}:${array[0]}:${array[1]} ec2-user@${BASTION_INSTANCE_ID}
    fi
    ;;
  opensearchtunnel )
    plain ""
    plain "Select the OpenSearch instance to setup a tunnel to from this list:"
    _get_opensearch_endpoints

    _selection_menu "${OPENSEARCH_ENDPOINTS[@]}"

    SAVED_IFS="${IFS}"
    IFS=':' read -ra array <<< "${SELECTION_CHOICE}"
    IFS="${SAVED_IFS}"

    local_port="${AWS_SSH_OPENSEARCH_LOCAL_PORT:-4433}"
    info "Starting local tunnel to ${array[0]} on local port ${local_port}."
    info "SSH Tunnel will start in foreground, use Ctrl-C to close the tunnel."
    if [[ ${AWS_SSH_SSM} -ne 1  ]]; then
      info "Using ssh as transport because AWS_SSH_SSM is not set to 1."
      _check_bastion_ip_and_exit_if_not_set "${1}"
      ssh ${SSH_OPTIONS} -Nnt -A -L ${local_port}:${array[0]}:${array[1]} ec2-user@${BASTION_IP}
    else
      info "Using SSM as transport because AWS_SSH_SSM is set to 1."
      _copy_public_key_to_target_ec2_instance
      ssh ${SSH_OPTIONS} \
         -o ProxyCommand="sh -c \"aws ssm start-session --target %h --document-name AWS-StartSSHSession --parameters 'portNumber=%p'\"" \
         -Nnt -A -L ${local_port}:${array[0]}:443 ec2-user@${BASTION_INSTANCE_ID}
    fi
    ;;
  custombastiontunnel | customtunnel )
    plain ""
    plain "Setup a tunnel to ip:port passed as 2 arguments. A third argument can be passed to specify the remote port."
    plain "When absent, <port> is used as both local and remote port."
    plain " Argument 4 is the optional name of an EC2 instance to use to tunnel through. By default, the bastion host"
    plain "is used."
    plain "When using a non-bastion host, SSM is enabled forcibly."

    [[ -z "${2}" ]] && fail "${0} custombastiontunnel ip port [remoteport] [ec2-instance-name]"
    [[ -z "${3}" ]] && fail "${0} custombastiontunnel ip port [remoteport] [ec2-instance-name]"

    if [[ -z "${4}" ]]; then
      # local and remote port are the same
      custombastiontunnel_local_port="${3}"
      custombastiontunnel_remote_port="${3}"
    else
      custombastiontunnel_local_port="${3}"
      custombastiontunnel_remote_port="${4}"
    fi

    if [[ -z "${5}" ]]; then
      # Use bastion to tunnel through
      :
    else
      # Use the specified instance to tunnel through
      AWS_SSH_SSM=1
      _get_ec2_instance_id_and_az "${5}"
    fi

    custombastiontunnel_ip_address="${2}"
    custombastiontunnel_port="${3}"

    info "Starting local tunnel to ${custombastiontunnel_ip_address} on local port ${custombastiontunnel_port}."
    info "SSH Tunnel will start in foreground, use Ctrl-C to close the tunnel."
    if [[ ${AWS_SSH_SSM} -ne 1  ]]; then
      info "Using ssh as transport because AWS_SSH_SSM is not set to 1."
      _check_bastion_ip_and_exit_if_not_set "${1}"
      ssh ${SSH_OPTIONS} -Nnt -A -L ${custombastiontunnel_local_port}:${custombastiontunnel_ip_address}:${custombastiontunnel_remote_port} ec2-user@${BASTION_IP}
    else
      info "Using SSM as transport because AWS_SSH_SSM is set to 1."
      _copy_public_key_to_target_ec2_instance
      ssh ${SSH_OPTIONS} \
         -o ProxyCommand="sh -c \"aws ssm start-session --target %h --document-name AWS-StartSSHSession --parameters 'portNumber=%p'\"" \
         -Nnt -A -L ${custombastiontunnel_local_port}:${custombastiontunnel_ip_address}:${custombastiontunnel_remote_port} ec2-user@${BASTION_INSTANCE_ID}
    fi
    ;;
  dockerps )
    info "Show docker container info on all ECS hosts"
    _get_ecs_private_ips
    for h in ${ECS_HOST_IPS_ARRAY[*]}
    do
      if [[ ${h} != "None" ]]
      then
        info "Show docker containers on ${h}"
        _check_bastion_ip_and_exit_if_not_set "${1}"
        ssh ${SSH_OPTIONS} -t -A ec2-user@${BASTION_IP} "ssh ${SSH_OPTIONS} -A ${h} docker ps --format \\\"table {{.ID}}\\\t{{.Image}}\\\""
      fi
    done
    ;;
  ecsservicetunnel)
    _tunnel_to_ecs_service "${2:-unknown}" "${3}"
    ;;
  dockerexec)
    _dockerexec "${2:-unknown}" "${3:-/bin/bash}"
    ;;

  portforward )
      [[ -z "${2}" ]] && fail "${0} portforward [port] [remoteport]"
      [[ -z "${3}" ]] && fail "${0} portforward [port] [remoteport]"
      local_port=${2}; shift
      remote_port=${2}; shift

      plain ""
      plain "Select the SSM managed instance to connect to using:"
      _get_ssm_instances

      _selection_menu "${SSM_INSTANCES[@]}"

      SAVED_IFS="${IFS}"
      IFS=':' read -ra array <<< "${SELECTION_CHOICE}"
      IFS="${SAVED_IFS}"
      info "Starting SSM session to EC2 instance with name tag ${array[4]}."
      _copy_public_key_to_target_ec2_instance
      aws ssm start-session --target "${array[1]}" --document-name AWS-StartPortForwardingSession --parameters "{\"portNumber\":[\"${remote_port}\"], \"localPortNumber\":[\"${local_port}\"]}"
    ;;

esac
